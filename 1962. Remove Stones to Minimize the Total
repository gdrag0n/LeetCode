


1.
class Solution:
    def minStoneSum(self, piles: List[int], k: int) -> int:
        
        n=len(piles)

        for i in range(k):
            j=randint(0,n-1)
            piles[j]=piles[j]-(piles[j]//2)
        
        stones=0
        for i in range(n):
            stones=stones+piles[i]
        
        return stones
        
2.        
class Solution:
    def minStoneSum(self, piles: List[int], k: int) -> int:
        
        n=len(piles)
        piles.sort()

        for i in range(-1,-k+1,-1):
            piles[i]=piles[i]-(piles[i]//2)
        
        stones=0
        for i in range(n):
            stones=stones+piles[i]
        
        return stones
        
3. partition
class Solution:
    def minStoneSum(self, piles: List[int], k: int) -> int:
        
        even=[]
        odd=[]

        for i in piles:
            if i%2==0:
                even.append(i)
            else:
                odd.append(i)
        
        even.sort()
        odd.sort()
        
        array=odd+even
        n=len(array)
        
        for i in range(-1,-k+1,-1):
            array[i]=array[i]-(array[i]//2)
        
        stones=0
        for i in range(n):
            stones=stones+array[i]
        
        return stones
